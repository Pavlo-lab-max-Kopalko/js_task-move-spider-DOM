{"mappings":"ACEA,IAAM,EAAS,SAAS,aAAa,CAAC,WAChC,EAAO,SAAS,aAAa,CAAC,SAIpC,SAAS,gBAAgB,CAAC,QAAS,SAAC,CAApC,EAGE,GAFc,EAAE,MAAM,CAAC,OAAO,CAAC,UAM/B,IAAM,EAAW,EAAK,qBAAqB,GACrC,EAAa,EAAO,qBAAqB,GACzC,EAAc,EAAO,WAAW,CAChC,EAAS,EAAK,SAAS,CAEzB,EAAI,EAAE,OAAO,CAAG,EAAc,EAAI,EAAS,EAAS,IAAI,CACxD,EAAI,EAAE,OAAO,CAAG,EAAc,EAAI,EAAS,EAAS,GAAG,CAQ3D,EAAI,KAAK,GAAG,CAAC,EAAG,KAAK,GAAG,CAAC,EAAG,EAAK,WAAW,CAAG,EAAW,KAAK,GAC/D,EAAI,KAAK,GAAG,CAAC,EAAG,KAAK,GAAG,CAAC,EAAG,EAAK,YAAY,CAAG,EAAW,MAAM,GAMjE,EAAO,KAAK,CAAC,IAAI,CAAG,EAAI,KACxB,EAAO,KAAK,CAAC,GAAG,CAAG,EAAI,KACzB","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar spider = document.querySelector(\".spider\");\nvar wall = document.querySelector(\".wall\");\n// we create values from elements before point\n// when we set handler and use those as we need\ndocument.addEventListener(\"click\", function(e) {\n    var field = e.target.closest(\".wall\");\n    if (!field) return; // we get rid of options when \"click\" happens outside the wall\n    var wallRect = wall.getBoundingClientRect();\n    var spiderRect = spider.getBoundingClientRect();\n    var widthSpider = spider.offsetWidth; // the spider is square\n    var border = wall.clientTop;\n    var x = e.clientX - widthSpider / 2 - border - wallRect.left;\n    var y = e.clientY - widthSpider / 2 - border - wallRect.top;\n    // here we math how many 'px' the spider need to move on\n    // the wall in vertical and horizontal parameters relative himself.\n    // From coordinates of \"click\" we subtract half width spider,\n    // border of wall, position wall in our window and\n    // get a numbers those we need\n    x = Math.max(0, Math.min(x, wall.clientWidth - spiderRect.width));\n    y = Math.max(0, Math.min(y, wall.clientHeight - spiderRect.height));\n    // the spider can't move out of the wall. Also can't move on border.\n    // It was can happend if our 'x' and 'y' get less zero or more\n    // than the length of the wall\n    spider.style.left = x + \"px\"; // we set position our spider\n    spider.style.top = y + \"px\"; // relative to the upper left corner\n});\n\n//# sourceMappingURL=index.90ef9603.js.map\n","'use strict';\n\nconst spider = document.querySelector('.spider');\nconst wall = document.querySelector('.wall');\n// we create values from elements before point\n// when we set handler and use those as we need\n\ndocument.addEventListener('click', (e) => {\n  const field = e.target.closest('.wall');\n\n  if (!field) {\n    return; // we get rid of options when \"click\" happens outside the wall\n  }\n\n  const wallRect = wall.getBoundingClientRect();\n  const spiderRect = spider.getBoundingClientRect();\n  const widthSpider = spider.offsetWidth; // the spider is square\n  const border = wall.clientTop;\n\n  let x = e.clientX - widthSpider / 2 - border - wallRect.left;\n  let y = e.clientY - widthSpider / 2 - border - wallRect.top;\n\n  // here we math how many 'px' the spider need to move on\n  // the wall in vertical and horizontal parameters relative himself.\n  // From coordinates of \"click\" we subtract half width spider,\n  // border of wall, position wall in our window and\n  // get a numbers those we need\n\n  x = Math.max(0, Math.min(x, wall.clientWidth - spiderRect.width));\n  y = Math.max(0, Math.min(y, wall.clientHeight - spiderRect.height));\n\n  // the spider can't move out of the wall. Also can't move on border.\n  // It was can happend if our 'x' and 'y' get less zero or more\n  // than the length of the wall\n\n  spider.style.left = x + 'px'; // we set position our spider\n  spider.style.top = y + 'px'; // relative to the upper left corner\n});\n"],"names":["spider","document","querySelector","wall","addEventListener","e","target","closest","wallRect","getBoundingClientRect","spiderRect","widthSpider","offsetWidth","border","clientTop","x","clientX","left","y","clientY","top","Math","max","min","clientWidth","width","clientHeight","height","style"],"version":3,"file":"index.90ef9603.js.map"}